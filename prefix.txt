#include <iostream>
#include <stack>
#include <string>
using namespace std;

// Function to determine precedence of operators
int precedence(char op) {
    if(op == '+' || op == '-') return 1;
    if(op == '*' || op == '/') return 2;
    return 0;
}

// Function to convert infix expression to postfix
string infixToPostfix(string infix) {
    stack<char> s;
    string postfix;
    for(char &ch : infix) {
        if(isalnum(ch)) 
            postfix += ch;  // Add operand to postfix
        else if(ch == '(') 
            s.push(ch);  // Push '(' to stack
        else if(ch == ')') {
            while(!s.empty() && s.top() != '(') {
                postfix += s.top(); s.pop();  // Pop till '('
            }
            s.pop();  // Pop '('
        } else {
            while(!s.empty() && precedence(s.top()) >= precedence(ch)) {
                postfix += s.top(); s.pop();  // Pop operators
            }
            s.push(ch);  // Push current operator
        }
    }
    while(!s.empty()) {
        postfix += s.top(); s.pop();  // Add remaining operators
    }
    return postfix;
}

// Function to evaluate postfix expression
int evaluatePostfix(string postfix) {
    stack<int> s;
    for(char &ch : postfix) {
        if(isdigit(ch))
            s.push(ch - '0');  // Push operand to stack
        else {
            int val2 = s.top(); s.pop();  // Second operand
            int val1 = s.top(); s.pop();  // First operand
            switch(ch) {
                case '+': s.push(val1 + val2); break;
                case '-': s.push(val1 - val2); break;
                case '*': s.push(val1 * val2); break;
                case '/': s.push(val1 / val2); break;
            }
        }
    }
    return s.top();  // Result
}

int main() {
    string infix;
    cout << "Enter infix expression: ";
    cin >> infix;

    string postfix = infixToPostfix(infix);
    cout << "Postfix expression: " << postfix << endl;
    cout << "Evaluation result: " << evaluatePostfix(postfix) << endl;

    return 0;
}
